---
name: CI

on:
  push:
    branches-ignore:
      - dependabot/**
  pull_request:
    branches-ignore:
      - dependabot/**
  schedule:
    - cron: '0 2 * * 1' # https://crontab.guru

permissions:
  contents: read

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:

  generate-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v3
      - name: Print Branchname
        if: github.event_name != 'pull_request'
        run: echo ${{github.ref}}
      - name: Adjust version in antora.yml
        if: github.event_name != 'pull_request'
        uses: sebastian-sommerfeld-io/github-action-update-antora-yml@main
        with:
          git_ref: ${{github.ref}}
      - name: README.adoc
        if: github.event_name != 'pull_request'
        uses: sebastian-sommerfeld-io/github-action-generate-readme@main
        with:
          caption: Tron
      - name: Generate docs from bash scripts
        if: github.event_name != 'pull_request'
        uses: sebastian-sommerfeld-io/github-action-generate-docs@main
      - name: Commit and push
        if: github.event_name != 'pull_request'
        uses: EndBug/add-and-commit@v9
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: "[Actions Bot] auto-generated docs"

  validate-links:
    runs-on: ubuntu-latest
    needs: ['generate-docs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install asciidoc-link-check
        run: npm install --location=global asciidoc-link-check@1.0.15
      - name: Validate links in all adoc files
        run: find . -name '*.adoc' -exec asciidoc-link-check -c .adoc-links.json -p {} \;

  lint-yaml:
    runs-on: ubuntu-latest
    needs: ['generate-docs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run yamllint
        uses: ibiqlik/action-yamllint@v3

  lint-env-files:
    runs-on: ubuntu-latest
    needs: ['generate-docs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run dotenvlinter in container
        run: docker run -i --rm --volume "$(pwd):/app" --workdir "/app" dotenvlinter/dotenv-linter:latest --exclude "*node_modules*" --recursive

  lint-folders:
    runs-on: ubuntu-latest
    needs: ['generate-docs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run folderslint in container
        run: docker run -i --rm --volume "$(pwd):$(pwd)" --workdir "$(pwd)" sommerfeldio/folderslint:latest folderslint

  lint-filenames:
    runs-on: ubuntu-latest
    needs: ['generate-docs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run ls-lint in container
        run: docker run -i --rm --volume "$(pwd):/data" --workdir "/data" lslintorg/ls-lint:1.11.0

  shellcheck:
    runs-on: ubuntu-latest
    needs: ['generate-docs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          ignore_paths: node_modules target

  lint-dockerfile:
    runs-on: ubuntu-latest
    needs: ['generate-docs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: src/main/Dockerfile

  qodana-analysis:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: ['generate-docs']
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Qodana
        run: |
          (
            cd src/util/code-analyzer || exit
            ./analyze.sh --save-report
          )
        shell: bash
      - name: Upload qodana result to Github Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: target/qodana/report/results/qodana.sarif.json

  test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: ['lint-yaml', 'lint-env-files', 'lint-folders', 'lint-filenames', 'shellcheck', 'lint-dockerfile']
    strategy:
      matrix:
        go-version: ['1.19.6', '1.20.2']
        platform: ['ubuntu-latest', 'windows-latest']
    steps:
      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Test
        run: |
          (
            cd src/main/go || exit
            go test ./...
          )
        shell: bash

  build-deploy-binary:
    runs-on: ubuntu-latest
    needs: ['test']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19.6'
      - name: Test
        run: |
          (
            cd src/main/go || exit

            readonly TARGET_DIR="../../../target"
            readonly COVERAGE_REPORT="go-code-coverage.out"
            mkdir -p "$TARGET_DIR"

            go test -coverprofile="./$COVERAGE_REPORT" ./...

            old='github.com/sebastian-sommerfeld-io/tron'
            new='src/main/go'
            sed -i "s|$old|$new|g" "$COVERAGE_REPORT"
            mv "$COVERAGE_REPORT" "$TARGET_DIR/$COVERAGE_REPORT"

            go run . --version
          )
        shell: bash
      - name: SonarCloud Scan
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: SonarSource/sonarcloud-github-action@v1.9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
      - name: Build
        run: |
          (
            cd src/main/go || exit
            go build

            ./tron --version
          )
        shell: bash
      - name: Deploy
        run: echo "TODO ... deploy binary to somewhere (does github offer some sort of artifact repo ala artifactory?)"
        shell: bash

  validate-binary-deployment:
    runs-on: ubuntu-latest
    needs: ['build-deploy-binary']
    strategy:
      matrix:
        platform: ['ubuntu-latest', 'windows-latest']
    steps:
      - name: Validate for given platforms
        if: ${{ github.actor != 'dependabot[bot]' }}
        run: echo "TODO Download and run simple command ..."
        shell: bash

  build-deploy-image:
    runs-on: ubuntu-latest
    needs: ['test']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build and run
        run: |
          (
            cd src/main || exit
            ./tron.sh --version
          )
        shell: bash
      - name: Login to DockerHub
        uses: docker/login-action@v2
        if: ${{ github.actor != 'dependabot[bot]' }}
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Deploy image to DockerHub
        if: ${{ github.actor != 'dependabot[bot]' }}
        run: |
          (
            IMAGE_DEV="local/tron:dev"
            IMAGE_CI="sommerfeldio/tron:ci"

            docker image tag "$IMAGE_DEV" "$IMAGE_CI"
            docker push "$IMAGE_CI"
          )
        shell: bash

  validate-image-deployment:
    runs-on: ubuntu-latest
    needs: ['build-deploy-image']
    steps:
      - name: Verify deployment to DockerHub
        if: ${{ github.actor != 'dependabot[bot]' }}
        run: |
          IMAGE_CI="sommerfeldio/tron:ci"
          docker pull "$IMAGE_CI"
        shell: bash

  on-failure:
    runs-on: ubuntu-latest
    needs: ['generate-docs', 'validate-links', 'lint-yaml', 'lint-env-files', 'lint-folders', 'lint-filenames', 'shellcheck', 'lint-dockerfile', 'test', 'build-deploy-image', 'validate-image-deployment', 'build-deploy-binary', 'validate-binary-deployment', 'qodana-analysis']
    if: failure()
    steps:
      - name: Send Pipeline Status to Google Chat
        if: always()
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: ${{ github.workflow }}
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: failure
