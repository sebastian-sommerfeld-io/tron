---
name: Deploy + Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version (= new tag for the repo)
        required: true
      publish:
        type: boolean
        description: If true, publish artifacts are published to DockerHub etc.
        required: true
        default: false

permissions:
  contents: read

jobs:

  validate-inputs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Info
        run: |
          echo "Github Ref = ${{ github.ref }}"
          echo "Github Event = ${{ github.event_name }}"
          echo "Tag with version = ${{ github.event.inputs.version }}"
          echo "Publish Artifacts = ${{ github.event.inputs.publish }}"
        shell: bash
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Validate version syntax
        run: |
          (
            cd src/util/workflows/cd/validate-version || exit
            npm install
            npm run dev
          )
        env:
          CHECK_VERSION: ${{ github.event.inputs.version }}
        shell: bash
      - name: Validate version
        run: echo "Check that version does not already exist and does not skip a version number (not 0.1.2 to 0.1.4 or 0.3.0 or 2.0.0)"
        shell: bash

  update-version:
    runs-on: ubuntu-latest
    needs: ['validate-inputs']
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Adjust version in antora.yml
        uses: sebastian-sommerfeld-io/github-action-update-antora-yml@main
        with:
          git_ref: ${{ github.event.inputs.version }}
      - name: Run yamllint for docs/antora.yml
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: docs/antora.yml
      - name: Commit and push
        uses: EndBug/add-and-commit@v9
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: "[Actions Bot] auto-generated version"

  release-tests:
    runs-on: ubuntu-latest
    needs: ['validate-inputs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Todo
        run: echo "Run some automated tests to check if the application is in a releasable state ..."

  binary-deploy:
    runs-on: ubuntu-latest
    needs: ['update-version', 'release-tests']
    steps:
      - name: Todo
        run: echo "TODO ... maybe part of the Github Release (job later on)"

  validate-binary-deployment:
    runs-on: ubuntu-latest
    needs: ['binary-deploy']
    steps:
      - name: Todo
        run: echo "TODO ..."

  dockerhub-deploy:
    runs-on: ubuntu-latest
    needs: ['update-version', 'release-tests']
    steps:
      - name: Login to DockerHub
        if: github.event.inputs.publish == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Deploy to DockerHub
        if: github.event.inputs.publish == 'true'
        run: |
          VERSION_TAG="${{ github.event.inputs.version }}"
          IMAGE="sommerfeldio/tron"
          docker pull "$IMAGE:ci"

          docker tag "$IMAGE:ci" "$IMAGE:latest"
          docker tag "$IMAGE:ci" "$IMAGE:$VERSION_TAG"

          docker push "$IMAGE:latest"
          docker push "$IMAGE:$VERSION_TAG"
        shell: bash

  validate-docker-deployment:
    runs-on: ubuntu-latest
    needs: ['dockerhub-deploy']
    steps:
      - name: Verify deployment to DockerHub
        if: github.event.inputs.publish == 'true'
        run: |
          VERSION_TAG="${{ github.event.inputs.version }}"
          IMAGE="sommerfeldio/tron"

          docker pull "$IMAGE:latest"
          docker pull "$IMAGE:$VERSION_TAG"
        shell: bash

  dockerhub-desc:
    runs-on: ubuntu-latest
    needs: ['validate-docker-deployment', 'validate-binary-deployment']
    steps:
      - name: Checkout code
        if: github.event.inputs.publish == 'true'
        uses: actions/checkout@v3
      - name: Convert README from Asciidoc to Markdown for DockerHub description
        if: github.event.inputs.publish == 'true'
        run: |
          sudo apt-get install -y pandoc asciidoc
          asciidoc -b docbook README.adoc
          pandoc -f docbook -t markdown_strict README.xml -o README.md
        shell: bash
      - name: Update DockerHub description
        if: github.event.inputs.publish == 'true'
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: sommerfeldio/tron
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./README.md

  github-tag-and-release:
    runs-on: ubuntu-latest
    needs: ['validate-docker-deployment', 'validate-binary-deployment']
    # permissions:
    #   contents: write
    steps:
      - name: Checkout code
        if: github.event.inputs.publish == 'true'
        uses: actions/checkout@v3
      - name: Create tag and Github release
        if: github.event.inputs.publish == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_REPO_AND_PROJECT }}
        # If a matching git tag does not yet exist, one will automatically get created
        # from the latest state of the default branch.
        # if SNAPSHOT then --prerelease
        run: |
          gh release create "${{ github.event.inputs.version }}" --prerelease --generate-notes

          # Upload all tarballs in a directory as release assets
          # gh release create v1.2.3 ./dist/*.tgz
        shell: bash

  on-failure:
    runs-on: ubuntu-latest
    needs: ['validate-inputs', 'update-version', 'release-tests', 'github-tag-and-release', 'dockerhub-deploy', 'dockerhub-desc', 'validate-docker-deployment', 'binary-deploy', 'validate-binary-deployment']
    if: failure()
    steps:
      - name: Send Pipeline Status to Google Chat
        if: always()
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: ${{ github.workflow }}
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: failure
